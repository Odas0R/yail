
========================================= AST =========================================

Program
| Statement: GlobalStatement
| | Token: global
| | Body:
| | | Statement: VariableStatement
| | | | Token: int
| | | | Expression(Type): Indentifier (int)
| | | | Expression(Name): Identifier (x)
| | | | Expression(Value):
| | | | | Expression: IntegerLiteral (5)
| Statement: FunctionStatement
| | Token: main
| | Parameters:
| | ReturnType:
| | | | Array: false
| | | Expression: ReturnType
| | | | Expression(Type): Identifier (bool)
| | Body:
| | | Statement: BlockStatement
| | | | Statement: LocalStatement
| | | | | Token: local
| | | | | Body:
| | | | | | Statement: VariableStatement
| | | | | | | Token: int
| | | | | | | Expression(Type): Indentifier (int)
| | | | | | | Expression(Name): Identifier (y)
| | | | | | | Expression(Value):
| | | | | | | | Expression: IntegerLiteral (2)
| | | | Statement: ExpressionStatement
| | | | | Expression: IfExpression
| | | | | | Condition:
| | | | | | | Expression: InfixExpression (>)
| | | | | | | | Expression: Identifier (y)
| | | | | | | | Expression: Identifier (x)
| | | | | | Consequence:
| | | | | | | Statement: BlockStatement
| | | | | | | | Statement: ExpressionStatement
| | | | | | | | | Expression: CallExpression
| | | | | | | | | | Function:
| | | | | | | | | | | Expression: Identifier (write)
| | | | | | | | | | Arguments:
| | | | | | | | | | | Expression: StringLiteral
| | | | | | | | | | | | Token: y número é maior que x!!
| | | | | | | | | | | | Value: y número é maior que x!!
| | | | | | Alternative:
| | | | | | | Statement: BlockStatement
| | | | | | | | Statement: ExpressionStatement
| | | | | | | | | Expression: IfExpression
| | | | | | | | | | Condition:
| | | | | | | | | | | Expression: InfixExpression (==)
| | | | | | | | | | | | Expression: Identifier (x)
| | | | | | | | | | | | Expression: Identifier (y)
| | | | | | | | | | Consequence:
| | | | | | | | | | | Statement: BlockStatement
| | | | | | | | | | | | Statement: ExpressionStatement
| | | | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | | | Function:
| | | | | | | | | | | | | | | Expression: Identifier (write)
| | | | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | | | Expression: StringLiteral
| | | | | | | | | | | | | | | | Token: y número é igual a x!!
| | | | | | | | | | | | | | | | Value: y número é igual a x!!
| | | | | | | | | | Alternative:
| | | | | | | | | | | Statement: BlockStatement
| | | | | | | | | | | | Statement: ExpressionStatement
| | | | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | | | Function:
| | | | | | | | | | | | | | | Expression: Identifier (write)
| | | | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | | | Expression: StringLiteral
| | | | | | | | | | | | | | | | Token: y número é menor que x!!
| | | | | | | | | | | | | | | | Value: y número é menor que x!!
| | | | Statement: AssignmentStatement
| | | | | Token: main
| | | | | Expression(Left):
| | | | | | Expression: Identifier (main)
| | | | | Expression(Value):
| | | | | | Expression: Boolean (true)

========================================= TOKENS =========================================

{Type:GLOBAL Literal:global}
{Type:{ Literal:{}
{Type:IDENT Literal:int}
{Type:IDENT Literal:x}
{Type:= Literal:=}
{Type:INT Literal:5}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:main}
{Type:( Literal:(}
{Type:) Literal:)}
{Type:IDENT Literal:bool}
{Type:{ Literal:{}
{Type:LOCAL Literal:local}
{Type:{ Literal:{}
{Type:IDENT Literal:int}
{Type:IDENT Literal:y}
{Type:= Literal:=}
{Type:INT Literal:2}
{Type:} Literal:}}
{Type:IF Literal:if}
{Type:( Literal:(}
{Type:IDENT Literal:y}
{Type:> Literal:>}
{Type:IDENT Literal:x}
{Type:) Literal:)}
{Type:{ Literal:{}
{Type:IDENT Literal:write}
{Type:( Literal:(}
{Type:STRING Literal:y número é maior que x!!}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:ELSE Literal:else}
{Type:{ Literal:{}
{Type:IF Literal:if}
{Type:( Literal:(}
{Type:IDENT Literal:x}
{Type:== Literal:==}
{Type:IDENT Literal:y}
{Type:) Literal:)}
{Type:{ Literal:{}
{Type:IDENT Literal:write}
{Type:( Literal:(}
{Type:STRING Literal:y número é igual a x!!}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:ELSE Literal:else}
{Type:{ Literal:{}
{Type:IDENT Literal:write}
{Type:( Literal:(}
{Type:STRING Literal:y número é menor que x!!}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:} Literal:}}
{Type:IDENT Literal:main}
{Type:= Literal:=}
{Type:TRUE Literal:true}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:EOF Literal:}
