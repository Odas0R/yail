
========================================= AST =========================================

Program
| Statement: StructsStatement
| | Token: structs
| | Structs:
| | | Expression: Struct
| | | | Token: point2D
| | | | Attributes:
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (float)
| | | | | | Expression(Name): Identifier (x)
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (float)
| | | | | | Expression(Name): Identifier (y)
| | | Expression: Struct
| | | | Token: circle
| | | | Attributes:
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (point2D)
| | | | | | Expression(Name): Identifier (center)
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (float)
| | | | | | Expression(Name): Identifier (radius)
| | | Expression: Struct
| | | | Token: point3D
| | | | Attributes:
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (float)
| | | | | | Expression(Name): Identifier (x)
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (float)
| | | | | | Expression(Name): Identifier (y)
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (float)
| | | | | | Expression(Name): Identifier (z)
| | | Expression: Struct
| | | | Token: sphere
| | | | Attributes:
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (point3D)
| | | | | | Expression(Name): Identifier (center)
| | | | | Expression: Attribute
| | | | | | Array: false
| | | | | | Expression(Type): Identifier (float)
| | | | | | Expression(Name): Identifier (radius)
| Statement: FunctionStatement
| | Token: main
| | Parameters:
| | ReturnType:
| | | | Array: false
| | | Expression: ReturnType
| | | | Expression(Type): Identifier (bool)
| | Body:
| | | Statement: BlockStatement
| | | | Statement: LocalStatement
| | | | | Token: local
| | | | | Body:
| | | | | | Statement: BlockStatement
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: circle
| | | | | | | | Expression(Type): Indentifier (circle)
| | | | | | | | Expression(Name): Identifier (circ1)
| | | | | | | | Expression(Value): <nil>
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: circle
| | | | | | | | Expression(Type): Indentifier (circle)
| | | | | | | | Expression(Name): Identifier (circ2)
| | | | | | | | Expression(Value): <nil>
| | | | | | Statement: BlockStatement
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: sphere
| | | | | | | | Expression(Type): Indentifier (sphere)
| | | | | | | | Expression(Name): Identifier (sph1)
| | | | | | | | Expression(Value): <nil>
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: sphere
| | | | | | | | Expression(Type): Indentifier (sphere)
| | | | | | | | Expression(Name): Identifier (sph2)
| | | | | | | | Expression(Value): <nil>
| | | | Statement: ExpressionStatement
| | | | | Expression: CallExpression
| | | | | | Function:
| | | | | | | Expression: Identifier (write)
| | | | | | Arguments:
| | | | | | | Expression: StringLiteral
| | | | | | | | Token: Introduza os dois círculos
| | | | | | | | Value: Introduza os dois círculos
| | | | Statement: AssignmentStatement
| | | | | Token: circ1
| | | | | Expression(Left):
| | | | | | Expression: Identifier (circ1)
| | | | | Expression(Value):
| | | | | | Expression: CallExpression
| | | | | | | Function:
| | | | | | | | Expression: Identifier (read_all)
| | | | | | | Arguments:
| | | | Statement: AssignmentStatement
| | | | | Token: circ2
| | | | | Expression(Left):
| | | | | | Expression: Identifier (circ2)
| | | | | Expression(Value):
| | | | | | Expression: CallExpression
| | | | | | | Function:
| | | | | | | | Expression: Identifier (read_all)
| | | | | | | Arguments:
| | | | Statement: ExpressionStatement
| | | | | Expression: CallExpression
| | | | | | Function:
| | | | | | | Expression: Identifier (write)
| | | | | | Arguments:
| | | | | | | Expression: StringLiteral
| | | | | | | | Token: Área de intersecção entre circ1 e circ2 é: 
| | | | | | | | Value: Área de intersecção entre circ1 e circ2 é: 
| | | | | | | Expression: CallExpression
| | | | | | | | Function:
| | | | | | | | | Expression: Identifier (intersectionArea)
| | | | | | | | Arguments:
| | | | | | | | | Expression: Identifier (circ1)
| | | | | | | | | Expression: Identifier (circ2)
| | | | Statement: ExpressionStatement
| | | | | Expression: CallExpression
| | | | | | Function:
| | | | | | | Expression: Identifier (write)
| | | | | | Arguments:
| | | | | | | Expression: StringLiteral
| | | | | | | | Token: Introduza as duas esferas
| | | | | | | | Value: Introduza as duas esferas
| | | | Statement: AssignmentStatement
| | | | | Token: sph1
| | | | | Expression(Left):
| | | | | | Expression: Identifier (sph1)
| | | | | Expression(Value):
| | | | | | Expression: CallExpression
| | | | | | | Function:
| | | | | | | | Expression: Identifier (read_all)
| | | | | | | Arguments:
| | | | Statement: AssignmentStatement
| | | | | Token: sph2
| | | | | Expression(Left):
| | | | | | Expression: Identifier (sph2)
| | | | | Expression(Value):
| | | | | | Expression: CallExpression
| | | | | | | Function:
| | | | | | | | Expression: Identifier (read_all)
| | | | | | | Arguments:
| | | | Statement: ExpressionStatement
| | | | | Expression: CallExpression
| | | | | | Function:
| | | | | | | Expression: Identifier (write)
| | | | | | Arguments:
| | | | | | | Expression: StringLiteral
| | | | | | | | Token: O volume de intersecção entre a esfera sph1 e a esfera sph2 é: 
| | | | | | | | Value: O volume de intersecção entre a esfera sph1 e a esfera sph2 é: 
| | | | | | | Expression: CallExpression
| | | | | | | | Function:
| | | | | | | | | Expression: Identifier (intersectionVolume)
| | | | | | | | Arguments:
| | | | | | | | | Expression: Identifier (sph1)
| | | | | | | | | Expression: Identifier (sph2)
| | | | Statement: AssignmentStatement
| | | | | Token: main
| | | | | Expression(Left):
| | | | | | Expression: Identifier (main)
| | | | | Expression(Value):
| | | | | | Expression: Boolean (true)
| Statement: FunctionStatement
| | Token: intersectionArea
| | Parameters:
| | | Expression: Parameter
| | | | Array: false
| | | | Expression(Type): Identifier (circle)
| | | | Expression(Name): Identifier (c1)
| | | Expression: Parameter
| | | | Array: false
| | | | Expression(Type): Identifier (circle)
| | | | Expression(Name): Identifier (c2)
| | ReturnType:
| | | | Array: false
| | | Expression: ReturnType
| | | | Expression(Type): Identifier (float)
| | Body:
| | | Statement: BlockStatement
| | | | Statement: LocalStatement
| | | | | Token: local
| | | | | Body:
| | | | | | Statement: BlockStatement
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: float
| | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | Expression(Name): Identifier (d)
| | | | | | | | Expression(Value):
| | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: float
| | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | Expression(Name): Identifier (r1)
| | | | | | | | Expression(Value):
| | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: float
| | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | Expression(Name): Identifier (r2)
| | | | | | | | Expression(Value):
| | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: float
| | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | Expression(Name): Identifier (area)
| | | | | | | | Expression(Value):
| | | | | | | | | Expression: FloatLiteral (0)
| | | | Statement: AssignmentStatement
| | | | | Token: d
| | | | | Expression(Left):
| | | | | | Expression: Identifier (d)
| | | | | Expression(Value):
| | | | | | Expression: CallExpression
| | | | | | | Function:
| | | | | | | | Expression: Identifier (distance2D)
| | | | | | | Arguments:
| | | | | | | | Expression: AccessorExpression
| | | | | | | | | Token: .
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (c1)
| | | | | | | | | Expression(Index):
| | | | | | | | | | Expression: Identifier (center)
| | | | | | | | Expression: AccessorExpression
| | | | | | | | | Token: .
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (c2)
| | | | | | | | | Expression(Index):
| | | | | | | | | | Expression: Identifier (center)
| | | | Statement: AssignmentStatement
| | | | | Token: r1
| | | | | Expression(Left):
| | | | | | Expression: Identifier (r1)
| | | | | Expression(Value):
| | | | | | Expression: AccessorExpression
| | | | | | | Token: .
| | | | | | | Expression(Left):
| | | | | | | | Expression: Identifier (c1)
| | | | | | | Expression(Index):
| | | | | | | | Expression: Identifier (radius)
| | | | Statement: AssignmentStatement
| | | | | Token: r2
| | | | | Expression(Left):
| | | | | | Expression: Identifier (r2)
| | | | | Expression(Value):
| | | | | | Expression: AccessorExpression
| | | | | | | Token: .
| | | | | | | Expression(Left):
| | | | | | | | Expression: Identifier (c2)
| | | | | | | Expression(Index):
| | | | | | | | Expression: Identifier (radius)
| | | | Statement: ExpressionStatement
| | | | | Expression: IfExpression
| | | | | | Condition:
| | | | | | | Expression: InfixExpression (>=)
| | | | | | | | Expression: Identifier (d)
| | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | Expression: Identifier (r2)
| | | | | | Consequence:
| | | | | | | Statement: BlockStatement
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: area
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (area)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: IntegerLiteral (0)
| | | | Statement: ExpressionStatement
| | | | | Expression: IfExpression
| | | | | | Condition:
| | | | | | | Expression: InfixExpression (<=)
| | | | | | | | Expression: Identifier (d)
| | | | | | | | Expression: CallExpression
| | | | | | | | | Function:
| | | | | | | | | | Expression: Identifier (abs)
| | | | | | | | | Arguments:
| | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | Expression: Identifier (r2)
| | | | | | Consequence:
| | | | | | | Statement: BlockStatement
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: area
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (area)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | Expression: Identifier (pi)
| | | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | | Function:
| | | | | | | | | | | | | | Expression: Identifier (min)
| | | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | Function:
| | | | | | | | | | | | | Expression: Identifier (min)
| | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | Alternative:
| | | | | | | Statement: BlockStatement
| | | | | | | | Statement: LocalStatement
| | | | | | | | | Token: local
| | | | | | | | | Body:
| | | | | | | | | | Statement: BlockStatement
| | | | | | | | | | | Statement: VariableStatement
| | | | | | | | | | | | Token: float
| | | | | | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | | | | | Expression(Name): Identifier (angle1)
| | | | | | | | | | | | Expression(Value):
| | | | | | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | | | | | Statement: VariableStatement
| | | | | | | | | | | | Token: float
| | | | | | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | | | | | Expression(Name): Identifier (angle2)
| | | | | | | | | | | | Expression(Value):
| | | | | | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: angle1
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (angle1)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | Function:
| | | | | | | | | | | | | Expression: Identifier (acos)
| | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | Expression: InfixExpression (/)
| | | | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: angle2
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (angle2)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | Function:
| | | | | | | | | | | | | Expression: Identifier (acos)
| | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | Expression: InfixExpression (/)
| | | | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: area
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (area)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | Expression: FloatLiteral (0.5)
| | | | | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | | Expression: Identifier (angle1)
| | | | | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | | | | Function:
| | | | | | | | | | | | | | | | Expression: Identifier (sin)
| | | | | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | | | | Expression: Identifier (angle1)
| | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | | Expression: Identifier (angle2)
| | | | | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | | | | Function:
| | | | | | | | | | | | | | | | Expression: Identifier (sin)
| | | | | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | | | | Expression: Identifier (angle2)
| | | | Statement: AssignmentStatement
| | | | | Token: intersectionArea
| | | | | Expression(Left):
| | | | | | Expression: Identifier (intersectionArea)
| | | | | Expression(Value):
| | | | | | Expression: Identifier (area)
| Statement: FunctionStatement
| | Token: intersectionVolume
| | Parameters:
| | | Expression: Parameter
| | | | Array: false
| | | | Expression(Type): Identifier (sphere)
| | | | Expression(Name): Identifier (s1)
| | | Expression: Parameter
| | | | Array: false
| | | | Expression(Type): Identifier (sphere)
| | | | Expression(Name): Identifier (s2)
| | ReturnType:
| | | | Array: false
| | | Expression: ReturnType
| | | | Expression(Type): Identifier (float)
| | Body:
| | | Statement: BlockStatement
| | | | Statement: LocalStatement
| | | | | Token: local
| | | | | Body:
| | | | | | Statement: BlockStatement
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: float
| | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | Expression(Name): Identifier (d)
| | | | | | | | Expression(Value):
| | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: float
| | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | Expression(Name): Identifier (r1)
| | | | | | | | Expression(Value):
| | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: float
| | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | Expression(Name): Identifier (r2)
| | | | | | | | Expression(Value):
| | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | Statement: VariableStatement
| | | | | | | | Token: float
| | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | Expression(Name): Identifier (vol)
| | | | | | | | Expression(Value):
| | | | | | | | | Expression: FloatLiteral (0)
| | | | Statement: AssignmentStatement
| | | | | Token: d
| | | | | Expression(Left):
| | | | | | Expression: Identifier (d)
| | | | | Expression(Value):
| | | | | | Expression: CallExpression
| | | | | | | Function:
| | | | | | | | Expression: Identifier (distance3D)
| | | | | | | Arguments:
| | | | | | | | Expression: AccessorExpression
| | | | | | | | | Token: .
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (s1)
| | | | | | | | | Expression(Index):
| | | | | | | | | | Expression: Identifier (center)
| | | | | | | | Expression: AccessorExpression
| | | | | | | | | Token: .
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (s2)
| | | | | | | | | Expression(Index):
| | | | | | | | | | Expression: Identifier (center)
| | | | Statement: AssignmentStatement
| | | | | Token: r1
| | | | | Expression(Left):
| | | | | | Expression: Identifier (r1)
| | | | | Expression(Value):
| | | | | | Expression: AccessorExpression
| | | | | | | Token: .
| | | | | | | Expression(Left):
| | | | | | | | Expression: Identifier (s1)
| | | | | | | Expression(Index):
| | | | | | | | Expression: Identifier (radius)
| | | | Statement: AssignmentStatement
| | | | | Token: r2
| | | | | Expression(Left):
| | | | | | Expression: Identifier (r2)
| | | | | Expression(Value):
| | | | | | Expression: AccessorExpression
| | | | | | | Token: .
| | | | | | | Expression(Left):
| | | | | | | | Expression: Identifier (s2)
| | | | | | | Expression(Index):
| | | | | | | | Expression: Identifier (radius)
| | | | Statement: ExpressionStatement
| | | | | Expression: IfExpression
| | | | | | Condition:
| | | | | | | Expression: InfixExpression (>=)
| | | | | | | | Expression: Identifier (d)
| | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | Expression: Identifier (r2)
| | | | | | Consequence:
| | | | | | | Statement: BlockStatement
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: vol
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (vol)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: IntegerLiteral (0)
| | | | Statement: ExpressionStatement
| | | | | Expression: IfExpression
| | | | | | Condition:
| | | | | | | Expression: InfixExpression (<=)
| | | | | | | | Expression: Identifier (d)
| | | | | | | | Expression: CallExpression
| | | | | | | | | Function:
| | | | | | | | | | Expression: Identifier (abs)
| | | | | | | | | Arguments:
| | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | Expression: Identifier (r2)
| | | | | | Consequence:
| | | | | | | Statement: BlockStatement
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: vol
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (vol)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | Expression: InfixExpression (/)
| | | | | | | | | | | | | Expression: IntegerLiteral (4)
| | | | | | | | | | | | | Expression: IntegerLiteral (3)
| | | | | | | | | | | | Expression: Identifier (pi)
| | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | Function:
| | | | | | | | | | | | | Expression: Identifier (pow)
| | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | | | | Function:
| | | | | | | | | | | | | | | Expression: Identifier (min)
| | | | | | | | | | | | | | Arguments:
| | | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | Expression: IntegerLiteral (3)
| | | | | | Alternative:
| | | | | | | Statement: BlockStatement
| | | | | | | | Statement: LocalStatement
| | | | | | | | | Token: local
| | | | | | | | | Body:
| | | | | | | | | | Statement: BlockStatement
| | | | | | | | | | | Statement: VariableStatement
| | | | | | | | | | | | Token: float
| | | | | | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | | | | | Expression(Name): Identifier (h1)
| | | | | | | | | | | | Expression(Value):
| | | | | | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | | | | | Statement: VariableStatement
| | | | | | | | | | | | Token: float
| | | | | | | | | | | | Expression(Type): Indentifier (float)
| | | | | | | | | | | | Expression(Name): Identifier (h2)
| | | | | | | | | | | | Expression(Value):
| | | | | | | | | | | | | Expression: FloatLiteral (0)
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: h1
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (h1)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | Expression: InfixExpression (/)
| | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: h2
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (h2)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | Expression: InfixExpression (/)
| | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | | | | | Expression: Identifier (d)
| | | | | | | | Statement: AssignmentStatement
| | | | | | | | | Token: vol
| | | | | | | | | Expression(Left):
| | | | | | | | | | Expression: Identifier (vol)
| | | | | | | | | Expression(Value):
| | | | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | Expression: InfixExpression (/)
| | | | | | | | | | | | | | | | Expression: IntegerLiteral (1)
| | | | | | | | | | | | | | | | Expression: IntegerLiteral (3)
| | | | | | | | | | | | | | | Expression: Identifier (pi)
| | | | | | | | | | | | | | Expression: Identifier (h1)
| | | | | | | | | | | | | Expression: Identifier (h1)
| | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | Expression: IntegerLiteral (3)
| | | | | | | | | | | | | | Expression: Identifier (r1)
| | | | | | | | | | | | | Expression: Identifier (h1)
| | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | | Expression: InfixExpression (/)
| | | | | | | | | | | | | | | | Expression: IntegerLiteral (1)
| | | | | | | | | | | | | | | | Expression: IntegerLiteral (3)
| | | | | | | | | | | | | | | Expression: Identifier (pi)
| | | | | | | | | | | | | | Expression: Identifier (h2)
| | | | | | | | | | | | | Expression: Identifier (h2)
| | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | Expression: InfixExpression (*)
| | | | | | | | | | | | | | Expression: IntegerLiteral (3)
| | | | | | | | | | | | | | Expression: Identifier (r2)
| | | | | | | | | | | | | Expression: Identifier (h2)
| | | | Statement: AssignmentStatement
| | | | | Token: intersectionVolume
| | | | | Expression(Left):
| | | | | | Expression: Identifier (intersectionVolume)
| | | | | Expression(Value):
| | | | | | Expression: Identifier (vol)
| Statement: FunctionStatement
| | Token: distance2D
| | Parameters:
| | | Expression: Parameter
| | | | Array: false
| | | | Expression(Type): Identifier (point2D)
| | | | Expression(Name): Identifier (p)
| | | Expression: Parameter
| | | | Array: false
| | | | Expression(Type): Identifier (point2D)
| | | | Expression(Name): Identifier (q)
| | ReturnType:
| | | | Array: false
| | | Expression: ReturnType
| | | | Expression(Type): Identifier (float)
| | Body:
| | | Statement: BlockStatement
| | | | Statement: AssignmentStatement
| | | | | Token: distance2D
| | | | | Expression(Left):
| | | | | | Expression: Identifier (distance2D)
| | | | | Expression(Value):
| | | | | | Expression: CallExpression
| | | | | | | Function:
| | | | | | | | Expression: Identifier (square_root)
| | | | | | | Arguments:
| | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | Expression: CallExpression
| | | | | | | | | | Function:
| | | | | | | | | | | Expression: Identifier (pow)
| | | | | | | | | | Arguments:
| | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | Expression: Identifier (q)
| | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | Expression: Identifier (x)
| | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | Expression: Identifier (p)
| | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | Expression: Identifier (x)
| | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | Expression: CallExpression
| | | | | | | | | | Function:
| | | | | | | | | | | Expression: Identifier (pow)
| | | | | | | | | | Arguments:
| | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | Expression: Identifier (q)
| | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | Expression: Identifier (y)
| | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | Expression: Identifier (p)
| | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | Expression: Identifier (y)
| | | | | | | | | | | Expression: IntegerLiteral (2)
| Statement: FunctionStatement
| | Token: distance3D
| | Parameters:
| | | Expression: Parameter
| | | | Array: false
| | | | Expression(Type): Identifier (point3D)
| | | | Expression(Name): Identifier (p)
| | | Expression: Parameter
| | | | Array: false
| | | | Expression(Type): Identifier (point3D)
| | | | Expression(Name): Identifier (q)
| | ReturnType:
| | | | Array: false
| | | Expression: ReturnType
| | | | Expression(Type): Identifier (float)
| | Body:
| | | Statement: BlockStatement
| | | | Statement: AssignmentStatement
| | | | | Token: distance3D
| | | | | Expression(Left):
| | | | | | Expression: Identifier (distance3D)
| | | | | Expression(Value):
| | | | | | Expression: CallExpression
| | | | | | | Function:
| | | | | | | | Expression: Identifier (square_root)
| | | | | | | Arguments:
| | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | Expression: InfixExpression (+)
| | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | Function:
| | | | | | | | | | | | Expression: Identifier (pow)
| | | | | | | | | | | Arguments:
| | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | | Expression: Identifier (q)
| | | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | | Expression: Identifier (x)
| | | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | | Expression: Identifier (p)
| | | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | | Expression: Identifier (x)
| | | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | | Expression: CallExpression
| | | | | | | | | | | Function:
| | | | | | | | | | | | Expression: Identifier (pow)
| | | | | | | | | | | Arguments:
| | | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | | Expression: Identifier (q)
| | | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | | Expression: Identifier (y)
| | | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | | Expression: Identifier (p)
| | | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | | Expression: Identifier (y)
| | | | | | | | | | | | Expression: IntegerLiteral (2)
| | | | | | | | | Expression: CallExpression
| | | | | | | | | | Function:
| | | | | | | | | | | Expression: Identifier (pow)
| | | | | | | | | | Arguments:
| | | | | | | | | | | Expression: InfixExpression (-)
| | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | Expression: Identifier (q)
| | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | Expression: Identifier (z)
| | | | | | | | | | | | Expression: AccessorExpression
| | | | | | | | | | | | | Token: .
| | | | | | | | | | | | | Expression(Left):
| | | | | | | | | | | | | | Expression: Identifier (p)
| | | | | | | | | | | | | Expression(Index):
| | | | | | | | | | | | | | Expression: Identifier (z)
| | | | | | | | | | | Expression: IntegerLiteral (2)

========================================= TOKENS =========================================

{Type:STRUCTS Literal:structs}
{Type:{ Literal:{}
{Type:IDENT Literal:point2D}
{Type:{ Literal:{}
{Type:IDENT Literal:float}
{Type:IDENT Literal:x}
{Type:, Literal:,}
{Type:IDENT Literal:y}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:; Literal:;}
{Type:IDENT Literal:circle}
{Type:{ Literal:{}
{Type:IDENT Literal:point2D}
{Type:IDENT Literal:center}
{Type:, Literal:,}
{Type:IDENT Literal:float}
{Type:IDENT Literal:radius}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:; Literal:;}
{Type:IDENT Literal:point3D}
{Type:{ Literal:{}
{Type:IDENT Literal:float}
{Type:IDENT Literal:x}
{Type:, Literal:,}
{Type:IDENT Literal:y}
{Type:, Literal:,}
{Type:IDENT Literal:z}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:; Literal:;}
{Type:IDENT Literal:sphere}
{Type:{ Literal:{}
{Type:IDENT Literal:point3D}
{Type:IDENT Literal:center}
{Type:, Literal:,}
{Type:IDENT Literal:float}
{Type:IDENT Literal:radius}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:main}
{Type:( Literal:(}
{Type:) Literal:)}
{Type:IDENT Literal:bool}
{Type:{ Literal:{}
{Type:LOCAL Literal:local}
{Type:{ Literal:{}
{Type:IDENT Literal:circle}
{Type:IDENT Literal:circ1}
{Type:, Literal:,}
{Type:IDENT Literal:circ2}
{Type:; Literal:;}
{Type:IDENT Literal:sphere}
{Type:IDENT Literal:sph1}
{Type:, Literal:,}
{Type:IDENT Literal:sph2}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:write}
{Type:( Literal:(}
{Type:STRING Literal:Introduza os dois círculos}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:circ1}
{Type:= Literal:=}
{Type:IDENT Literal:read_all}
{Type:( Literal:(}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:circ2}
{Type:= Literal:=}
{Type:IDENT Literal:read_all}
{Type:( Literal:(}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:write}
{Type:( Literal:(}
{Type:STRING Literal:Área de intersecção entre circ1 e circ2 é: }
{Type:, Literal:,}
{Type:IDENT Literal:intersectionArea}
{Type:( Literal:(}
{Type:IDENT Literal:circ1}
{Type:, Literal:,}
{Type:IDENT Literal:circ2}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:write}
{Type:( Literal:(}
{Type:STRING Literal:Introduza as duas esferas}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:sph1}
{Type:= Literal:=}
{Type:IDENT Literal:read_all}
{Type:( Literal:(}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:sph2}
{Type:= Literal:=}
{Type:IDENT Literal:read_all}
{Type:( Literal:(}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:write}
{Type:( Literal:(}
{Type:STRING Literal:O volume de intersecção entre a esfera sph1 e a esfera sph2 é: }
{Type:, Literal:,}
{Type:IDENT Literal:intersectionVolume}
{Type:( Literal:(}
{Type:IDENT Literal:sph1}
{Type:, Literal:,}
{Type:IDENT Literal:sph2}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:main}
{Type:= Literal:=}
{Type:TRUE Literal:true}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:intersectionArea}
{Type:( Literal:(}
{Type:IDENT Literal:circle}
{Type:IDENT Literal:c1}
{Type:, Literal:,}
{Type:IDENT Literal:circle}
{Type:IDENT Literal:c2}
{Type:) Literal:)}
{Type:IDENT Literal:float}
{Type:{ Literal:{}
{Type:LOCAL Literal:local}
{Type:{ Literal:{}
{Type:IDENT Literal:float}
{Type:IDENT Literal:d}
{Type:, Literal:,}
{Type:IDENT Literal:r1}
{Type:, Literal:,}
{Type:IDENT Literal:r2}
{Type:, Literal:,}
{Type:IDENT Literal:area}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:d}
{Type:= Literal:=}
{Type:IDENT Literal:distance2D}
{Type:( Literal:(}
{Type:IDENT Literal:c1}
{Type:. Literal:.}
{Type:IDENT Literal:center}
{Type:, Literal:,}
{Type:IDENT Literal:c2}
{Type:. Literal:.}
{Type:IDENT Literal:center}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:r1}
{Type:= Literal:=}
{Type:IDENT Literal:c1}
{Type:. Literal:.}
{Type:IDENT Literal:radius}
{Type:; Literal:;}
{Type:IDENT Literal:r2}
{Type:= Literal:=}
{Type:IDENT Literal:c2}
{Type:. Literal:.}
{Type:IDENT Literal:radius}
{Type:; Literal:;}
{Type:IF Literal:if}
{Type:( Literal:(}
{Type:IDENT Literal:d}
{Type:>= Literal:>=}
{Type:IDENT Literal:r1}
{Type:+ Literal:+}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:{ Literal:{}
{Type:IDENT Literal:area}
{Type:= Literal:=}
{Type:INT Literal:0}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IF Literal:if}
{Type:( Literal:(}
{Type:IDENT Literal:d}
{Type:<= Literal:<=}
{Type:IDENT Literal:abs}
{Type:( Literal:(}
{Type:IDENT Literal:r1}
{Type:- Literal:-}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:{ Literal:{}
{Type:IDENT Literal:area}
{Type:= Literal:=}
{Type:IDENT Literal:pi}
{Type:* Literal:*}
{Type:IDENT Literal:min}
{Type:( Literal:(}
{Type:IDENT Literal:r1}
{Type:, Literal:,}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:* Literal:*}
{Type:IDENT Literal:min}
{Type:( Literal:(}
{Type:IDENT Literal:r1}
{Type:, Literal:,}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:ELSE Literal:else}
{Type:{ Literal:{}
{Type:LOCAL Literal:local}
{Type:{ Literal:{}
{Type:IDENT Literal:float}
{Type:IDENT Literal:angle1}
{Type:, Literal:,}
{Type:IDENT Literal:angle2}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:angle1}
{Type:= Literal:=}
{Type:INT Literal:2}
{Type:* Literal:*}
{Type:IDENT Literal:acos}
{Type:( Literal:(}
{Type:( Literal:(}
{Type:IDENT Literal:d}
{Type:* Literal:*}
{Type:IDENT Literal:d}
{Type:+ Literal:+}
{Type:IDENT Literal:r1}
{Type:* Literal:*}
{Type:IDENT Literal:r1}
{Type:- Literal:-}
{Type:IDENT Literal:r2}
{Type:* Literal:*}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:/ Literal:/}
{Type:( Literal:(}
{Type:INT Literal:2}
{Type:* Literal:*}
{Type:IDENT Literal:d}
{Type:* Literal:*}
{Type:IDENT Literal:r1}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:angle2}
{Type:= Literal:=}
{Type:INT Literal:2}
{Type:* Literal:*}
{Type:IDENT Literal:acos}
{Type:( Literal:(}
{Type:( Literal:(}
{Type:IDENT Literal:d}
{Type:* Literal:*}
{Type:IDENT Literal:d}
{Type:+ Literal:+}
{Type:IDENT Literal:r2}
{Type:* Literal:*}
{Type:IDENT Literal:r2}
{Type:- Literal:-}
{Type:IDENT Literal:r1}
{Type:* Literal:*}
{Type:IDENT Literal:r1}
{Type:) Literal:)}
{Type:/ Literal:/}
{Type:( Literal:(}
{Type:INT Literal:2}
{Type:* Literal:*}
{Type:IDENT Literal:d}
{Type:* Literal:*}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:area}
{Type:= Literal:=}
{Type:FLOAT Literal:0.5}
{Type:* Literal:*}
{Type:( Literal:(}
{Type:IDENT Literal:r1}
{Type:* Literal:*}
{Type:IDENT Literal:r1}
{Type:* Literal:*}
{Type:( Literal:(}
{Type:IDENT Literal:angle1}
{Type:- Literal:-}
{Type:IDENT Literal:sin}
{Type:( Literal:(}
{Type:IDENT Literal:angle1}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:+ Literal:+}
{Type:IDENT Literal:r2}
{Type:* Literal:*}
{Type:IDENT Literal:r2}
{Type:* Literal:*}
{Type:( Literal:(}
{Type:IDENT Literal:angle2}
{Type:- Literal:-}
{Type:IDENT Literal:sin}
{Type:( Literal:(}
{Type:IDENT Literal:angle2}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:intersectionArea}
{Type:= Literal:=}
{Type:IDENT Literal:area}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:intersectionVolume}
{Type:( Literal:(}
{Type:IDENT Literal:sphere}
{Type:IDENT Literal:s1}
{Type:, Literal:,}
{Type:IDENT Literal:sphere}
{Type:IDENT Literal:s2}
{Type:) Literal:)}
{Type:IDENT Literal:float}
{Type:{ Literal:{}
{Type:LOCAL Literal:local}
{Type:{ Literal:{}
{Type:IDENT Literal:float}
{Type:IDENT Literal:d}
{Type:, Literal:,}
{Type:IDENT Literal:r1}
{Type:, Literal:,}
{Type:IDENT Literal:r2}
{Type:, Literal:,}
{Type:IDENT Literal:vol}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:d}
{Type:= Literal:=}
{Type:IDENT Literal:distance3D}
{Type:( Literal:(}
{Type:IDENT Literal:s1}
{Type:. Literal:.}
{Type:IDENT Literal:center}
{Type:, Literal:,}
{Type:IDENT Literal:s2}
{Type:. Literal:.}
{Type:IDENT Literal:center}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:r1}
{Type:= Literal:=}
{Type:IDENT Literal:s1}
{Type:. Literal:.}
{Type:IDENT Literal:radius}
{Type:; Literal:;}
{Type:IDENT Literal:r2}
{Type:= Literal:=}
{Type:IDENT Literal:s2}
{Type:. Literal:.}
{Type:IDENT Literal:radius}
{Type:; Literal:;}
{Type:IF Literal:if}
{Type:( Literal:(}
{Type:IDENT Literal:d}
{Type:>= Literal:>=}
{Type:IDENT Literal:r1}
{Type:+ Literal:+}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:{ Literal:{}
{Type:IDENT Literal:vol}
{Type:= Literal:=}
{Type:INT Literal:0}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IF Literal:if}
{Type:( Literal:(}
{Type:IDENT Literal:d}
{Type:<= Literal:<=}
{Type:IDENT Literal:abs}
{Type:( Literal:(}
{Type:IDENT Literal:r1}
{Type:- Literal:-}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:{ Literal:{}
{Type:IDENT Literal:vol}
{Type:= Literal:=}
{Type:( Literal:(}
{Type:INT Literal:4}
{Type:/ Literal:/}
{Type:INT Literal:3}
{Type:) Literal:)}
{Type:* Literal:*}
{Type:IDENT Literal:pi}
{Type:* Literal:*}
{Type:IDENT Literal:pow}
{Type:( Literal:(}
{Type:IDENT Literal:min}
{Type:( Literal:(}
{Type:IDENT Literal:r1}
{Type:, Literal:,}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:, Literal:,}
{Type:INT Literal:3}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:ELSE Literal:else}
{Type:{ Literal:{}
{Type:LOCAL Literal:local}
{Type:{ Literal:{}
{Type:IDENT Literal:float}
{Type:IDENT Literal:h1}
{Type:, Literal:,}
{Type:IDENT Literal:h2}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:h1}
{Type:= Literal:=}
{Type:IDENT Literal:r1}
{Type:- Literal:-}
{Type:( Literal:(}
{Type:IDENT Literal:d}
{Type:* Literal:*}
{Type:IDENT Literal:d}
{Type:+ Literal:+}
{Type:IDENT Literal:r1}
{Type:* Literal:*}
{Type:IDENT Literal:r1}
{Type:- Literal:-}
{Type:IDENT Literal:r2}
{Type:* Literal:*}
{Type:IDENT Literal:r2}
{Type:) Literal:)}
{Type:/ Literal:/}
{Type:( Literal:(}
{Type:INT Literal:2}
{Type:* Literal:*}
{Type:IDENT Literal:d}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:h2}
{Type:= Literal:=}
{Type:IDENT Literal:r2}
{Type:- Literal:-}
{Type:( Literal:(}
{Type:IDENT Literal:d}
{Type:* Literal:*}
{Type:IDENT Literal:d}
{Type:+ Literal:+}
{Type:IDENT Literal:r2}
{Type:* Literal:*}
{Type:IDENT Literal:r2}
{Type:- Literal:-}
{Type:IDENT Literal:r1}
{Type:* Literal:*}
{Type:IDENT Literal:r1}
{Type:) Literal:)}
{Type:/ Literal:/}
{Type:( Literal:(}
{Type:INT Literal:2}
{Type:* Literal:*}
{Type:IDENT Literal:d}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:IDENT Literal:vol}
{Type:= Literal:=}
{Type:( Literal:(}
{Type:INT Literal:1}
{Type:/ Literal:/}
{Type:INT Literal:3}
{Type:) Literal:)}
{Type:* Literal:*}
{Type:IDENT Literal:pi}
{Type:* Literal:*}
{Type:IDENT Literal:h1}
{Type:* Literal:*}
{Type:IDENT Literal:h1}
{Type:* Literal:*}
{Type:( Literal:(}
{Type:INT Literal:3}
{Type:* Literal:*}
{Type:IDENT Literal:r1}
{Type:- Literal:-}
{Type:IDENT Literal:h1}
{Type:) Literal:)}
{Type:+ Literal:+}
{Type:( Literal:(}
{Type:INT Literal:1}
{Type:/ Literal:/}
{Type:INT Literal:3}
{Type:) Literal:)}
{Type:* Literal:*}
{Type:IDENT Literal:pi}
{Type:* Literal:*}
{Type:IDENT Literal:h2}
{Type:* Literal:*}
{Type:IDENT Literal:h2}
{Type:* Literal:*}
{Type:( Literal:(}
{Type:INT Literal:3}
{Type:* Literal:*}
{Type:IDENT Literal:r2}
{Type:- Literal:-}
{Type:IDENT Literal:h2}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:intersectionVolume}
{Type:= Literal:=}
{Type:IDENT Literal:vol}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:distance2D}
{Type:( Literal:(}
{Type:IDENT Literal:point2D}
{Type:IDENT Literal:p}
{Type:, Literal:,}
{Type:IDENT Literal:point2D}
{Type:IDENT Literal:q}
{Type:) Literal:)}
{Type:IDENT Literal:float}
{Type:{ Literal:{}
{Type:IDENT Literal:distance2D}
{Type:= Literal:=}
{Type:IDENT Literal:square_root}
{Type:( Literal:(}
{Type:IDENT Literal:pow}
{Type:( Literal:(}
{Type:IDENT Literal:q}
{Type:. Literal:.}
{Type:IDENT Literal:x}
{Type:- Literal:-}
{Type:IDENT Literal:p}
{Type:. Literal:.}
{Type:IDENT Literal:x}
{Type:, Literal:,}
{Type:INT Literal:2}
{Type:) Literal:)}
{Type:+ Literal:+}
{Type:IDENT Literal:pow}
{Type:( Literal:(}
{Type:IDENT Literal:q}
{Type:. Literal:.}
{Type:IDENT Literal:y}
{Type:- Literal:-}
{Type:IDENT Literal:p}
{Type:. Literal:.}
{Type:IDENT Literal:y}
{Type:, Literal:,}
{Type:INT Literal:2}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:IDENT Literal:distance3D}
{Type:( Literal:(}
{Type:IDENT Literal:point3D}
{Type:IDENT Literal:p}
{Type:, Literal:,}
{Type:IDENT Literal:point3D}
{Type:IDENT Literal:q}
{Type:) Literal:)}
{Type:IDENT Literal:float}
{Type:{ Literal:{}
{Type:IDENT Literal:distance3D}
{Type:= Literal:=}
{Type:IDENT Literal:square_root}
{Type:( Literal:(}
{Type:IDENT Literal:pow}
{Type:( Literal:(}
{Type:IDENT Literal:q}
{Type:. Literal:.}
{Type:IDENT Literal:x}
{Type:- Literal:-}
{Type:IDENT Literal:p}
{Type:. Literal:.}
{Type:IDENT Literal:x}
{Type:, Literal:,}
{Type:INT Literal:2}
{Type:) Literal:)}
{Type:+ Literal:+}
{Type:IDENT Literal:pow}
{Type:( Literal:(}
{Type:IDENT Literal:q}
{Type:. Literal:.}
{Type:IDENT Literal:y}
{Type:- Literal:-}
{Type:IDENT Literal:p}
{Type:. Literal:.}
{Type:IDENT Literal:y}
{Type:, Literal:,}
{Type:INT Literal:2}
{Type:) Literal:)}
{Type:+ Literal:+}
{Type:IDENT Literal:pow}
{Type:( Literal:(}
{Type:IDENT Literal:q}
{Type:. Literal:.}
{Type:IDENT Literal:z}
{Type:- Literal:-}
{Type:IDENT Literal:p}
{Type:. Literal:.}
{Type:IDENT Literal:z}
{Type:, Literal:,}
{Type:INT Literal:2}
{Type:) Literal:)}
{Type:) Literal:)}
{Type:; Literal:;}
{Type:} Literal:}}
{Type:EOF Literal:}
