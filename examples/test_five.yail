structs {
  point2D {float x, y;};
  circle {point2D center, float radius;};
  point3D {float x, y, z;};
  sphere {point3D center, float radius;};
}

main() bool {
  local {
    circle circ1, circ2;
    sphere sph1, sph2;
  }
  write("Introduza os dois círculos");
  circ1 = read_all();
  circ2 = read_all();
  write("Área de intersecção entre circ1 e circ2 é: ", intersectionArea(circ1, circ2));

  write("Introduza as duas esferas");
  sph1 = read_all();
  sph2 = read_all();
  write("O volume de intersecção entre a esfera sph1 e a esfera sph2 é: ", intersectionVolume(sph1, sph2));

  main = true;
}

intersectionArea(circle c1, circle c2) float {
  local {float d, r1, r2, area;}
  d = distance2D(c1.center, c2.center);
  r1 = c1.radius;
  r2 = c2.radius;

  if (d >= r1 + r2) {
    area = 0;
  }

  if (d <= abs(r1 - r2)) {
    area = pi * min(r1, r2) * min(r1, r2);
  } else {
    local {float angle1, angle2;}
    angle1 = 2 * acos((d * d + r1 * r1 - r2 * r2) / (2 * d * r1));
    angle2 = 2 * acos((d * d + r2 * r2 - r1 * r1) / (2 * d * r2));
    area = 0.5 * (r1 * r1 * (angle1 - sin(angle1)) + r2 * r2 * (angle2 - sin(angle2)));
  }

  intersectionArea = area;
}

intersectionVolume(sphere s1, sphere s2) float {
  local {float d, r1, r2, vol;}
  d = distance3D(s1.center, s2.center);
  r1 = s1.radius;
  r2 = s2.radius;

  if (d >= r1 + r2) {
    vol = 0;
  }

  if (d <= abs(r1 - r2)) {
    vol = (4/3) * pi * pow(min(r1, r2), 3);
  } else {
    local {float h1, h2;}
    h1 = r1 - (d * d + r1 * r1 - r2 * r2) / (2 * d);
    h2 = r2 - (d * d + r2 * r2 - r1 * r1) / (2 * d);
    vol = (1/3) * pi * h1 * h1 * (3 * r1 - h1) + (1/3) * pi * h2 * h2 * (3 * r2 - h2);
  }

  intersectionVolume = vol;
}

distance2D(point2D p, point2D q) float {
  distance2D = square_root(pow(q.x - p.x, 2) + pow(q.y - p.y, 2));
}

distance3D(point3D p, point3D q) float {
  distance3D = square_root(
    pow(q.x - p.x, 2) +
    pow(q.y - p.y, 2) +
    pow(q.z - p.z, 2));
}
